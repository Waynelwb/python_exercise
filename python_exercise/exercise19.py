# 自定义函数
# 函数可用于将相关功能打包并参数化。在python中，可以创建四种函数：全局函数、局部函数、lambda函数、方法。
# 你可以定义一个由自己想要功能的函数，以下是简单的规则：
#
# 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
# 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
# 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
# 函数内容以冒号起始，并且缩进。
# return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
"""
def functionname( parameters ): # 默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。
   "函数_文档字符串"
   function_suite
   return [expression]
"""
# 以下为一个简单的Python函数，它将一个字符串作为传入参数，再打印到标准显示设备上。


def printme(st):
    """打印传入的字符串到标准显示设备上"""
    print(st)
    return
# 函数调用
# 这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。
# 如下实例调用了printme()函数：


printme("我要调用用户自定义函数!")
printme("再次调用同一函数")
# 参数传递
# 在 python 中，类型属于对象，变量是没有类型的：
a = [1, 2, 3]
b = "Runoob"
# 以上代码中，[1,2,3] 是 List 类型，"Runoob" 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是 List 类型对象，
# 也可以指向 String 类型对象。
# 可更改(mutable)与不可更改(immutable)对象:
"""
在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。

不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。

可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。

python 函数的参数传递：

不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。

可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响
"""
# python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。
# python 传不可变对象实例


def ChangeInt(a):
   a = 10


b = 2
ChangeInt(b)
print(b)  # 结果是 2
# 传可变对象实例


def changeme(mylist):
    """修改传入的列表"""
    mylist.append([1, 2, 3, 4])
    print("函数内取值: ", mylist)  # 函数内取值:  [10, 20, 30, [1, 2, 3, 4]]
    return


# 调用changeme函数
mylist = [10, 20, 30]
changeme(mylist)
print("函数外取值: ", mylist)  # 函数外取值:  [10, 20, 30, [1, 2, 3, 4]]

# 参数：以下是调用函数时可使用的正式参数类型：
# 必备参数：必备参数须以正确的顺序传入函数，调用时的数量必须和声明时的一样
# 关键字参数：关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为
# Python 解释器能够用参数名匹配参数值。


def printme(str):
    """打印任何传入的字符串"""
    print(str)
    return


# 调用printme函数
printme(str="My string")
# 默认参数：
# 不定长参数:
